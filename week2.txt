Types, Operators, and Expressions

การใช้ตัวแปร ในภาษาซี 
    
    การประกาศตัวแปร จะต้องมีการระบุประเภทของตัวแปรแล้วตามด้วชื่อตัวแปร ซึ่งจะต้องใช้ประเภทข้อมูลและขนาดทีเหมาะสมกับค่าที่จะเก็บ
    
    int main ()
    {
        int x = 10 ; ตัวแปร x มีประเภทข้อมูลเป็น int ใช้เก็บค่าป็นจำนวนเต็ม (ขนาด 2 ไบต์)
        float y = 10 ; ตัวแปร y มีประเภทข้อมูลเป็น float ใช้เก็บค่าจำนวนจริง (ขนาด 4 ไบต์)
        double z = 5 ; ตัวแปร z มีประเภทข้อมูลเป็น double ใช้เก็บค่าจำนวนจริง (ขนาด 8 ไบต์)
        char c = 'A' ; ตัวแปร c มีประเภทข้อมูลเป็น char ใช้เก็บค่าของตัวอักษร (ขนาด 1 ไบต์)
        
        คีย์เวิร์ด short ช่วยลดพื้นจัดเก็บให้กับประเภทตัวแปรจำนวนเต็ม
            short int
        
        คีย์เวิร์ด long ช่วยเพิ่มพื้นที่จัดเก็บ
            long  ใช้เก็บค่าจำนวนเต็ม (ขนาด 4 ไบต์ หรือ 8 ไบต์)
            long long ใช้เก็บค่าจำนวนเต็ม (ขนาด 8 ไบต์)
        
        คีย์เวิร์ด signed ใช้กำหนดประเภทตัวแปรจำนวนเต็ม ให้สามารถเก็บค่าที่มีเครื่องหมาย 
        ส่วนคีย์เวิร์ด unsigned ใช้กำหนดประเภทตัวแปรจำนวนเต็ม ให้สามารถเก็บค่าเฉพาะค่าบวก
            signed int 
            unsigned char
        
        สามารถตรวจสอบขนาดตัวแปรและประเภทข้อมูลจากการใช้ sizeof ซึ่งเป็น macro ใช้ตรวจสอบขนาดตัวแปรและประเภทข้อมูล

        คีย์เวิร์ด void ใช้ในกรณีของการนิยามฟังก์ชันที่ไม่มีการส่งค่ากลับไปยังผู้เรียก และใช้ในการกำหนดตัวแปรที่ไม่มีประเภทข้อมูล
    }

    การตั้งชื่อตัวแปร
    
    - การตั้งชื่อตัวแปร ควรตั้งชื่อให้อ่านแล้วเข้าใจง่าย
    - ตัวอักษรตัวแรกของแต่ละคำเป็นตัวพิมพ์ใหญ่นอกนั้นเป็นตัวพิ้มพ์เล็ก
    - อาจมีการคั่นด้วย _ (underscore)
    - สามารถใช้นำหลักการตั้งชื่อตัวแปรในการตั้งชื่อฟังก์ชันได้

    ค่าคงที่ 

    ค่าคงที่จำนวนเต็ม

        an integer constant เช่น 253
        a long constant (ตัวเลขจำนวนเต็มตามด้วย L หรือ l)
        unsigned constants (ตัวเลขจำนวนเต็มตามด้วย U หรือ u)
        unsigned long constants (ตัวเลขจำนวนเต็มตามด้วย UL หรือ ul)

    ค่างคงที่จำนวนจริง

        floating-point constants เช่น 11.2 
        floating-point constants (ตัวเลขจำนวนเต็มตามด้วย F หรือ f)
        double constants (ตามด้วย l หรือ L)

    ค่าคงที่ของเลขฐาน 2, ฐาน 8, และ ฐาน 16

        ตัวเลข 0 แล้วตามด้วยจำนวนเต็ม หมายถึง จำนวนนั้นอยู่ในรูปเลขฐาน 8
        0x หมายถึง เลขฐาน 16
        0b หรือ 0B หมายถึงเลข ฐาน 2
    
    ค่าคงที่ของตัวอักษร 

        character constant จะอยู่ในรูปตัวอักขระที่ถูกล้อมด้วยฝนทอง เช่น 'a'
        ตัวอักขระ ASCII และตัวเลขจำนวนเต็มสมารถแปลงถึงกันได้
        \0 เป็นอักขระตัวแรกใน ASCII ซึ่งมีค่าในตารางเป็น 0 และเป็น null ใน character
    
    รูปแบบการพิมพ์ (print format) การใช้ printf() และ puts()

        %d ใช้พิมพ์จำนวนเต็ม
        %f ใช้พิมพ์จำนวนจริง
        %c ใช้พิมพ์อักขระ
        %s ใช้พิมพ์สตริง
        %o ใช้พิมเลขฐาน 8
        %x ใช้พิมพ์เลขฐาน 16
        %p ใช้พิมพ์ pointer

        การใช้ printf เป็นการแสดงผล จะมีไม่มีการขึ้นบรรทัดใหม่
        การใช้ puts เป็นการแสดงผล จะมีการขึ้นบรรทัดใหม่ทุกครั้ง
        
        เช่น  #include <stdio.h>
             int main()
             {
                flaot a = 2.4;
                printf("%d", a) ค่าที่แสดงจะเป็น 2
             }
    
    Character Input and Output

        getchar() ใช้รับอักขระ 1 ตัวจาก stdin เข้ามาในโปรแกรมแล้วเก็บเข้าตัวแปร
        putchar() ใช่ส่งอักขระที่มีค่าใน ตัวแปรหนึ่ง ออกไปยัง stdout

    Expression (นิพจน์)

        นิพจน์จะต้องประกอบด้วยอย่าง 1 operator และอย่างน้อย 1 operand แต่นิพจน์อาจจะอยู่ในรูปของค่าคงที่ก็ได้

    Arithmetic Operators (ตัวดำเนินการทางคณิตศาสตร์)

        +, -, *, /, %
        % ไม่สามารถใช้กับตัวแปรประเภท float และ double ได้
        +, - เป็น unary operator ด้วย

    Relational Operators และ Logical Operators 

        Relational Operators  การเปรียบเทียบ               

            > มากกว่า                    
            >= มากกว่าเท่ากับ              
            < น้อยกว่า                    
            <= น้อยกว่าเท่ากับ
            == เท่ากับ
            != ไม่เท่ากับ

        Logical Operators  การเปรียบเทียบตรรกศาตร์

            && และ
            || หรือ
            !  นิเศษ

    Bitwise Operators ตัวดำเนินการบิต

        &   (AND)
        |   (OR)
        ^   (exclusive OR)
        <<  (left shift)
        >>  (right shift)
        ~   (one's complement (unary))