Pointers และ Dynamic Memory Allocation

    Pointers and Addresses

        การเข้าถึงและจัดหน่วยความจำ Memory ได้โดยการใช้ Pointers
        Pointers เป็นตัวแปร ที่ใช้อ้างถึง ตำแหน่ง หรือ Address ในหน่วยความจำ
        ค่าตำแหน่ง หรือ Address ในหน่อยความจำ คือค่าจำนวนเต็มบวก เริ่มจาก 0

    Pointer Operators 

        & เป็น unary operator ที่ใช้หาค่าตำแหน่งในหน่วยความจำของ operand

        * เป็น  unary operator ใช้เข้าถึงข้อมูลที่ถูกอ้างอิงโดยค่าในหน่วยความจำ

    ฟังก์ชัน scanf()

        ฟังก์ชัน scanf() จะคล้ายๆกับฟังก์ชัน pintf() แตกต่างกันที่ scanf()เป็นการรับข้อมูลเข้า ส่วน printf() เป็นการแสดงผลออก

    Pointers กับ Arrays

        ชื่อตัวแปร Arrays เป็นนิพจน์ที่บอกถึงค่า Address ของ Arrays

    การใช้ const กับ pointers

        const จะเป็นตัวแจ้งให้ compiler ว่าค่าของตัวแปรนั้นไม่สามารถแก้ไขได้

    นิพจน์ใน pointer และการใช้ตัวดำเนิการคณิตศาสตร์กับ pointer

        ตัวแปร pointer สามารถเป็น operand ให้กับ
        นิพจน์ทางคณิต 
        นิพจน์การกำหนดค่า 
        นิพจน์การเปรียบเทียบ

        การนำตัวแปร pointer ไปบวก หมายถึง การเพิ่มค่าขึ้นไปเป็นจำนวน 2 เท่าของขนาดประเภทของข้อมูลที่ตัวแปร pointer อ้างถึง

    การใช้ pointer อ้างไปถึงฟังก์ชัน (Pointers to Functions)

        pass by reference การส่ง pointer ทำได้ด้วยการส่ง Address เข้าไปในฟังก์ชัน แล้วรับด้วย pointer
    
    การจองหน่วยความจำ (Dynamic Memory Allocation)

        การใช้ malloc() 
            
            พารามิเตอร์ของ malloc() จะเป็นจำนวน byte ที่ใช้จองพื้นที่ในหน่วยความจำ
            ซึ่ง malloc() เป็น (void *) 
            ค่าที่ malloc() ส่งกลับมาเป็นตำแหน่งในหน่วยความจำ ที่ระบบปฏิบัติการจองพื้นที่ในหน่วยควมาจำไว้ให้

        การใช้ free()

            พารามิเตอร์ของ free() เป็นตำแหน่งที่ต้องการคืนพื้นที่ให้ระบบ

    Segmentation fault (core dumped)

        การเข้าถึงตำแหน่ง ถ้าไม่มีการจองหน่วยความจำที่นอกเหนือจากตัวแปรที่ประกาสไว้ มีโอกาสที่ระบบจะหยุดทำงาน ซึ่งมักจะแสดงข้อความว่า Segmentation fault (core dumped)